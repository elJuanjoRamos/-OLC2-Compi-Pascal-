 

DECLARACION => Var LDECLARACION
            | const identificador = EXPLOGICA ;

LDECLARACION => identificador  ASIGNACION 

LDECLARACIONP => LDECLARACION
                |epsilon


 
MULTIDECLARACION => , identificador MULTIDECLARACIONP

MULTIDECLARACIONP => MULTIDECLARACION
                    | epsilon

TIPO => String
        |integer
        |Real
        |Boolean
        |Void
        |identificador

TYPE => Type  identificador = TYPEP 

TYPEP => OBJECT
        | ARRAY

OBJECT => object DECLARACION end ;

ARRAY => array [ E . . E ] of TIPO ;  

ASIGNACION =>  : TIPOP ; LDECLARACIONP
            | MULTIDECLARACION : TIPO ; LDECLARACIONP

TIPOP => = EXPLOGICA
        | TIPO ASIGNACIONP

ASIGNACIONP => = EXPLOGICA 
            | epsilon

EXPLOGICA => EXPREL EXPLOGICAP

EXPLOGICAP => and EXREL EXPLOGICAP
            | or EXREL EXPLOGICAP
            | not EXREL EXPLOGICAP
            | epsilon

EXREL => E EXRELP

EXRELP => > C
        | < DIF
        | = E EXRELP 
        | epsilon

C => E EXRELP
    | = E EXRELP

DIF => > E EXRELP
    | C

E => T EP

EP => + T EP
    | - T EP

T => F TP

TP => * F TP 
    | / F TP 
    | % F TP
    | epsilon


F => ( EXPLOGICA )
    | real
    | entero
    | cadena
    | identificador
    | false
    | true
    | -









     #region FUNCIONS NO TERMINALES
            NonTerminal FUNCTION = new NonTerminal("FUNCTION", "FUNCTION");
            NonTerminal FUNCTION_LIST = new NonTerminal("FUNCTION_LIST", "FUNCTION_LIST");
            NonTerminal PARAMETERS = new NonTerminal("PARAMETERS", "PARAMETERS");
            NonTerminal ARGUMENTS = new NonTerminal("ARGUMENTS", "ARGUMENTS");
            NonTerminal REFERENCIA_VALOR = new NonTerminal("REFERENCIA_VALOR", "REFERENCIA_VALOR");
            #endregion




    
            #region FUNCIONES Y PROCEDIMIENTOS
            FUNCTION.Rule
                = RESERV_FUNCTION + IDENTIFIER + PAR_IZQ + PARAMETERS + PAR_DER + DOS_PUNTOS + DATA_TYPE + PUNTO_COMA
                    + INSTRUCTIONS_BODY
                    + PUNTO_COMA
                    + FUNCTION_LIST
                    ;

            FUNCTION_LIST.Rule
                = FUNCTION + FUNCTION_LIST
                | Empty
                ;
            PARAMETERS.Rule 
                = REFERENCIA_VALOR
                | Empty;

            REFERENCIA_VALOR.Rule
                = RESERV_VAR + IDENTIFIER + MORE_ID + DOS_PUNTOS + DATA_TYPE + ARGUMENTS
                | IDENTIFIER + MORE_ID + DOS_PUNTOS + DATA_TYPE + ARGUMENTS
                ;
            ARGUMENTS.Rule = PUNTO_COMA + REFERENCIA_VALOR
                | Empty
                ;
            #endregion





            /*LOGIC_EXPRESION.Rule = RELATIONAL_EXPRESION + LOGIC_EXPRESION_P;

            LOGIC_EXPRESION_P.Rule = AND + RELATIONAL_EXPRESION + LOGIC_EXPRESION_P
                | OR + RELATIONAL_EXPRESION + LOGIC_EXPRESION_P
                | NOT + RELATIONAL_EXPRESION + LOGIC_EXPRESION_P
                | Empty
                ;

            RELATIONAL_EXPRESION.Rule = EXPRESSION + RELATIONAL_EXPRESION_P;

            RELATIONAL_EXPRESION_P.Rule = HIGHER + COMPARE
                | LESS + DIFFERENT
                | EQUALS + EXPRESSION
                | Empty
                ;

            COMPARE.Rule = EXPRESSION + RELATIONAL_EXPRESION_P
                | EQUALS + EXPRESSION + RELATIONAL_EXPRESION_P
                ;

            DIFFERENT.Rule = HIGHER + EXPRESSION + RELATIONAL_EXPRESION_P
                | COMPARE;


            EXPRESSION.Rule = TERM + EXPRESSION_P;

            EXPRESSION_P.Rule = PLUS + TERM + EXPRESSION_P
                | MIN + TERM + EXPRESSION_P
                | Empty
                ;

            TERM.Rule = FACTOR + TERM_P;

            TERM_P.Rule = POR + FACTOR + TERM_P
                | DIVI + FACTOR + TERM_P
                | MODULE + FACTOR + TERM_P
                | Empty
                ;

            FACTOR.Rule = 
                 CADENA
                | IDENTIFIER
                | REAL
                | NUMERO
                | RESERV_TRUE
                | RESERV_FALSE
                | PAR_IZQ + LOGIC_EXPRESION + PAR_DER;*/



                   /*NonTerminal LOGIC_EXPRESION_P = new NonTerminal("LOGIC_EXPRESION_P", "LOGIC_EXPRESION_P");
            NonTerminal RELATIONAL_EXPRESION = new NonTerminal("RELATIONAL_EXPRESION", "RELATIONAL_EXPRESION");
            NonTerminal RELATIONAL_EXPRESION_P = new NonTerminal("RELATIONAL_EXPRESION_P", "RELATIONAL_EXPRESION_P");
            NonTerminal EXPRESSION = new NonTerminal("EXPRESSION");
            NonTerminal EXPRESSION_P = new NonTerminal("EXPRESSION_P");
            NonTerminal TERM = new NonTerminal("TERM");
            NonTerminal TERM_P = new NonTerminal("TERM_P");
            NonTerminal FACTOR = new NonTerminal("FACTOR");*/s











            NonTerminal EXPRESION = new NonTerminal("EXPRESION", "EXPRESION");
            NonTerminal EXPRESION_PRIMA = new NonTerminal("EXPRESION_PRIMA", "EXPRESION_PRIMA");
            NonTerminal EXPLOGICA = new NonTerminal("EXPLOGICA", "EXPLOGICA");
            NonTerminal EXPLOGICA_PRIMA = new NonTerminal("EXPLOGICA_PRIMA", "EXPLOGICA_PRIMA");
            NonTerminal EXPRELACIONAL = new NonTerminal("EXPRELACIONAL", "EXPRELACIONAL");
            NonTerminal EXPRELACIONAL_PRIMA = new NonTerminal("EXPRELACIONAL_PRIMA", "EXPRELACIONAL_PRIMA");
            NonTerminal TERMINO = new NonTerminal("TERMINO", "TERMINO");
            NonTerminal TERMINO_PRIMA = new NonTerminal("TERMINO_PRIMA ", "TERMINO_PRIMA");
            NonTerminal FACTOR = new NonTerminal("FACTOR", "FACTOR");





            
            #region EXPRESION
            
            EXPLOGICA.Rule = EXPRELACIONAL + EXPLOGICA_PRIMA;

            EXPLOGICA_PRIMA.Rule
                = AND + EXPRELACIONAL + EXPLOGICA_PRIMA
                | OR + EXPRELACIONAL + EXPLOGICA_PRIMA
                | NOT + EXPRELACIONAL + EXPLOGICA_PRIMA
                | Empty
                ;


            
            EXPRELACIONAL.Rule = EXPRESION + EXPRELACIONAL_PRIMA;

            EXPRELACIONAL_PRIMA.Rule
                = LESS + EXPRESION + EXPRELACIONAL_PRIMA
                | HIGHER + EXPRESION + EXPRELACIONAL_PRIMA
                | LESS_EQUAL + EXPRESION + EXPRELACIONAL_PRIMA
                | HIGHER_EQUAL + EXPRESION + EXPRELACIONAL_PRIMA
                | EQUALS + EXPRESION + EXPRELACIONAL_PRIMA
                | DISCTINCT + EXPRESION + EXPRELACIONAL_PRIMA
                | Empty
                ;

            

            EXPRESION.Rule = TERMINO + EXPRESION_PRIMA;

            EXPRESION_PRIMA.Rule
                = PLUS + TERMINO + EXPRESION_PRIMA
                | MIN + TERMINO + EXPRESION_PRIMA
                ;


            TERMINO.Rule = FACTOR + TERMINO_PRIMA;

            TERMINO_PRIMA.Rule
                = POR + FACTOR + TERMINO_PRIMA
                | DIVI + FACTOR + TERMINO_PRIMA
                | MODULE + FACTOR + TERMINO_PRIMA
                | Empty
                ;

            FACTOR.Rule
                = PAR_IZQ + EXPLOGICA + PAR_DER
                | REAL
                | CADENA
                | NUMERO
                | IDENTIFIER
                | RESERV_TRUE
                | RESERV_FALSE
                //| CALL_FUNCTION_PROCEDURE
                | MIN + REAL
                | MIN + NUMERO
                | MIN + IDENTIFIER
                | MIN + PAR_IZQ + EXPLOGICA + PAR_DER
                ;

     /*EXPRESION.Rule
         = EXPRESION + PLUS + EXPRESION
         | EXPRESION + MIN + EXPRESION
         | EXPRESION + POR + EXPRESION
         | EXPRESION + DIVI + EXPRESION
         | EXPRESION + MODULE + EXPRESION
         | EXPRESION + LESS + EXPRESION
         | EXPRESION + HIGHER + EXPRESION
         | EXPRESION + LESS_EQUAL + EXPRESION
         | EXPRESION + HIGHER_EQUAL + EXPRESION
         | EXPRESION + EQUALS + EXPRESION
         | EXPRESION + DISCTINCT + EXPRESION
         | EXPRESION + AND + EXPRESION
         | EXPRESION + OR + EXPRESION
         | NOT + EXPRESION
         | CALL_FUNCTION_PROCEDURE
         | IDENTIFIER
         | NUMERO
         | CADENA
         | REAL
         | RESERV_TRUE
         | RESERV_FALSE
         | PAR_IZQ + EXPRESION + PAR_DER
         ;*/
            #endregion

